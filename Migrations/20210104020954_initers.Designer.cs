// <auto-generated />
using System;
using Hub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hub.Migrations
{
    [DbContext(typeof(HubDbContext))]
    [Migration("20210104020954_initers")]
    partial class initers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Hub.Controllers.Info.NewsRegister", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Attachment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NewsDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("NewsLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NewsId");

                    b.HasIndex("OrgId");

                    b.ToTable("NewsRegister");
                });

            modelBuilder.Entity("Hub.Models.Advertisement.Adv", b =>
                {
                    b.Property<int>("AdvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ADVStatus")
                        .HasColumnType("bit");

                    b.Property<string>("AdvBannerImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AdvEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("AdvFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("AdvStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdvText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrgFeeId")
                        .HasColumnType("int");

                    b.HasKey("AdvId");

                    b.HasIndex("Id");

                    b.HasIndex("OrgFeeId");

                    b.ToTable("Adv");
                });

            modelBuilder.Entity("Hub.Models.Advertisement.Annual", b =>
                {
                    b.Property<int>("AnnualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AnnualCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrgFeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AnnualId");

                    b.HasIndex("Id");

                    b.HasIndex("OrgFeeId");

                    b.ToTable("Annual");
                });

            modelBuilder.Entity("Hub.Models.Advertisement.OrgFee", b =>
                {
                    b.Property<int>("OrgFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<bool>("OnSale")
                        .HasColumnType("bit");

                    b.Property<string>("OrgFeeDetail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrgFeeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("OrgFeePrice")
                        .HasColumnType("float");

                    b.Property<double>("OrgSaleFeePrice")
                        .HasColumnType("float");

                    b.HasKey("OrgFeeId");

                    b.HasIndex("ModuleId");

                    b.ToTable("OrgFee");
                });

            modelBuilder.Entity("Hub.Models.Event.EventApplyForm", b =>
                {
                    b.Property<int>("EventApplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventRegoId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("NumOfPerson")
                        .HasColumnType("int");

                    b.Property<double>("TotalFee")
                        .HasColumnType("float");

                    b.HasKey("EventApplyId");

                    b.HasIndex("EventRegoId");

                    b.HasIndex("Id");

                    b.ToTable("EventApplyForm");
                });

            modelBuilder.Entity("Hub.Models.Event.EventRego", b =>
                {
                    b.Property<int>("EventRegoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EventAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EventAward")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EventCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("EventFee")
                        .HasColumnType("float");

                    b.Property<string>("EventGuest")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EventImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EventRegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EventZip")
                        .HasColumnType("int");

                    b.Property<string>("LongDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("MaxPerson")
                        .HasColumnType("int");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("EventRegoId");

                    b.HasIndex("OrgId");

                    b.ToTable("EventRego");
                });

            modelBuilder.Entity("Hub.Models.Extra.AdvOrderDetail", b =>
                {
                    b.Property<int>("AdvOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdvId")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("AdvOrderDetailId");

                    b.HasIndex("AdvId");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("AdvOrderDetail");
                });

            modelBuilder.Entity("Hub.Models.Extra.AnnualOrderDetail", b =>
                {
                    b.Property<int>("AnnualOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AnnualId")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("AnnualOrderDetailId");

                    b.HasIndex("AnnualId");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("AnnualOrderDetail");
                });

            modelBuilder.Entity("Hub.Models.Extra.CashPayment", b =>
                {
                    b.Property<int>("CashPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CashPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefFromOrderHeader")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashPaymentId");

                    b.HasIndex("Id");

                    b.ToTable("CashPayment");
                });

            modelBuilder.Entity("Hub.Models.Extra.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Hub.Models.Extra.OrderHeader", b =>
                {
                    b.Property<int>("OrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderHeaderId");

                    b.HasIndex("Id");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("Hub.Models.Extra.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AdvId")
                        .HasColumnType("int");

                    b.Property<int?>("AnnualId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("AdvId");

                    b.HasIndex("AnnualId");

                    b.HasIndex("CouponId");

                    b.HasIndex("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Hub.Models.Extra.UserPayment", b =>
                {
                    b.Property<int>("UserPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BankAccount")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserPaymentId");

                    b.HasIndex("Id");

                    b.ToTable("UserPayment");
                });

            modelBuilder.Entity("Hub.Models.Extra.WatchList", b =>
                {
                    b.Property<int>("WatchListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AdvId")
                        .HasColumnType("int");

                    b.Property<int?>("EventRegoId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<int?>("NewsRegisterNewsId")
                        .HasColumnType("int");

                    b.HasKey("WatchListId");

                    b.HasIndex("AdvId");

                    b.HasIndex("EventRegoId");

                    b.HasIndex("Id");

                    b.HasIndex("NewsRegisterNewsId");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("Hub.Models.HubUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("UserStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Hub.Models.Organization.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ModuleId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Hub.Models.Organization.ModuleCategory", b =>
                {
                    b.Property<int>("ModuleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ModuleCategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("ModuleCategoryId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleCategory");
                });

            modelBuilder.Entity("Hub.Models.Organization.Org", b =>
                {
                    b.Property<int>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BannerImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LongDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ModuleCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrgCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrgImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("organizationType")
                        .HasColumnType("int");

                    b.Property<int>("serviceType")
                        .HasColumnType("int");

                    b.HasKey("OrgId");

                    b.HasIndex("ModuleCategoryId");

                    b.ToTable("Org");
                });

            modelBuilder.Entity("Hub.Models.Organization.UserDetail", b =>
                {
                    b.Property<int>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserDetailsCreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserDetailId");

                    b.HasIndex("Id");

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CommentDetail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Commentor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("HubUserId");

                    b.HasIndex("OrgId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.CommentReply", b =>
                {
                    b.Property<int>("CommentReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Commentor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplyCommentDetail")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("CommentReplyId");

                    b.HasIndex("CommentId");

                    b.HasIndex("HubUserId");

                    b.ToTable("CommentReply");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.HasKey("FacilityId");

                    b.HasIndex("OrgId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("FeePrice")
                        .HasColumnType("float");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.HasKey("FeeId");

                    b.HasIndex("OrgId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("HubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rater")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.HasKey("RatingId");

                    b.HasIndex("HubUserId");

                    b.HasIndex("OrgId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Hub.Controllers.Info.NewsRegister", b =>
                {
                    b.HasOne("Hub.Models.Organization.Org", "Org")
                        .WithMany("NewsRegisters")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Hub.Models.Advertisement.Adv", b =>
                {
                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany("Advs")
                        .HasForeignKey("Id");

                    b.HasOne("Hub.Models.Advertisement.OrgFee", "OrgFee")
                        .WithMany("Advs")
                        .HasForeignKey("OrgFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HubUser");

                    b.Navigation("OrgFee");
                });

            modelBuilder.Entity("Hub.Models.Advertisement.Annual", b =>
                {
                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("Hub.Models.Advertisement.OrgFee", "OrgFee")
                        .WithMany()
                        .HasForeignKey("OrgFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HubUser");

                    b.Navigation("OrgFee");
                });

            modelBuilder.Entity("Hub.Models.Advertisement.OrgFee", b =>
                {
                    b.HasOne("Hub.Models.Organization.Module", "Module")
                        .WithMany("OrgFees")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Hub.Models.Event.EventApplyForm", b =>
                {
                    b.HasOne("Hub.Models.Event.EventRego", "EventRego")
                        .WithMany("EventApplyForms")
                        .HasForeignKey("EventRegoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany("EventApplyForm")
                        .HasForeignKey("Id");

                    b.Navigation("EventRego");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("Hub.Models.Event.EventRego", b =>
                {
                    b.HasOne("Hub.Models.Organization.Org", "Org")
                        .WithMany("EventRegos")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Hub.Models.Extra.AdvOrderDetail", b =>
                {
                    b.HasOne("Hub.Models.Advertisement.Adv", "Adv")
                        .WithMany()
                        .HasForeignKey("AdvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Models.Extra.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adv");

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("Hub.Models.Extra.AnnualOrderDetail", b =>
                {
                    b.HasOne("Hub.Models.Advertisement.Annual", "Annual")
                        .WithMany()
                        .HasForeignKey("AnnualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Models.Extra.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Annual");

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("Hub.Models.Extra.CashPayment", b =>
                {
                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("Hub.Models.Extra.OrderHeader", b =>
                {
                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("Hub.Models.Extra.ShoppingCart", b =>
                {
                    b.HasOne("Hub.Models.Advertisement.Adv", "Adv")
                        .WithMany()
                        .HasForeignKey("AdvId");

                    b.HasOne("Hub.Models.Advertisement.Annual", "Annual")
                        .WithMany()
                        .HasForeignKey("AnnualId");

                    b.HasOne("Hub.Models.Extra.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("Adv");

                    b.Navigation("Annual");

                    b.Navigation("Coupon");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("Hub.Models.Extra.UserPayment", b =>
                {
                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("Hub.Models.Extra.WatchList", b =>
                {
                    b.HasOne("Hub.Models.Advertisement.Adv", "Adv")
                        .WithMany()
                        .HasForeignKey("AdvId");

                    b.HasOne("Hub.Models.Event.EventRego", "EventRego")
                        .WithMany()
                        .HasForeignKey("EventRegoId");

                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany("WatchList")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Controllers.Info.NewsRegister", "NewsRegister")
                        .WithMany()
                        .HasForeignKey("NewsRegisterNewsId");

                    b.Navigation("Adv");

                    b.Navigation("EventRego");

                    b.Navigation("HubUser");

                    b.Navigation("NewsRegister");
                });

            modelBuilder.Entity("Hub.Models.Organization.ModuleCategory", b =>
                {
                    b.HasOne("Hub.Models.Organization.Module", "Module")
                        .WithMany("ModuleCategories")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Hub.Models.Organization.Org", b =>
                {
                    b.HasOne("Hub.Models.Organization.ModuleCategory", "ModuleCategory")
                        .WithMany("Orgs")
                        .HasForeignKey("ModuleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleCategory");
                });

            modelBuilder.Entity("Hub.Models.Organization.UserDetail", b =>
                {
                    b.HasOne("Hub.Models.HubUser", "HubUser")
                        .WithMany("UserDetails")
                        .HasForeignKey("Id");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Comment", b =>
                {
                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany("Comments")
                        .HasForeignKey("HubUserId");

                    b.HasOne("Hub.Models.Organization.Org", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.CommentReply", b =>
                {
                    b.HasOne("Hub.Models.OrganizationFeature.Comment", "Comment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany("CommentReplies")
                        .HasForeignKey("HubUserId");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Facility", b =>
                {
                    b.HasOne("Hub.Models.Organization.Org", "Org")
                        .WithMany("Facilities")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Fee", b =>
                {
                    b.HasOne("Hub.Models.Organization.Org", "Org")
                        .WithMany("Fees")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Rating", b =>
                {
                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany("Ratings")
                        .HasForeignKey("HubUserId");

                    b.HasOne("Hub.Models.Organization.Org", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hub.Models.HubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Models.Advertisement.OrgFee", b =>
                {
                    b.Navigation("Advs");
                });

            modelBuilder.Entity("Hub.Models.Event.EventRego", b =>
                {
                    b.Navigation("EventApplyForms");
                });

            modelBuilder.Entity("Hub.Models.HubUser", b =>
                {
                    b.Navigation("Advs");

                    b.Navigation("CommentReplies");

                    b.Navigation("Comments");

                    b.Navigation("EventApplyForm");

                    b.Navigation("Ratings");

                    b.Navigation("UserDetails");

                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("Hub.Models.Organization.Module", b =>
                {
                    b.Navigation("ModuleCategories");

                    b.Navigation("OrgFees");
                });

            modelBuilder.Entity("Hub.Models.Organization.ModuleCategory", b =>
                {
                    b.Navigation("Orgs");
                });

            modelBuilder.Entity("Hub.Models.Organization.Org", b =>
                {
                    b.Navigation("EventRegos");

                    b.Navigation("Facilities");

                    b.Navigation("Fees");

                    b.Navigation("NewsRegisters");
                });

            modelBuilder.Entity("Hub.Models.OrganizationFeature.Comment", b =>
                {
                    b.Navigation("CommentReplies");
                });
#pragma warning restore 612, 618
        }
    }
}
